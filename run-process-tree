#!/usr/bin/env zsh
#
# Note: run-process-tree hangs if you run it as function from a
# subshell of interactive shell.
#
#   zsh -fic '(fpath+=(~/run-process-tree); autoload -Uz run-process-tree; run-process-tree :)'
#
# Because this hangs:
#
#  zsh -fic '(setopt monitor; : | :)'
#
# See https://www.zsh.org/mla/workers//2020/msg00471.html.

zmodload zsh/parameter zsh/param/private || return
local -P opt=(${(kv)options[@]})         || return
local -P pat=(${patchars[@]})            || return
local -P dis_pat=(${dis_patchars[@]})    || return
emulate -L zsh -o err_return             || return
setopt monitor traps_async pipe_fail no_unset
zmodload zsh/system

if (( $# == 0 )); then
  print -ru2 -- 'usage: run-process-tree command [arg]...'
  return 1
fi

local -P stdout REPLY
exec {stdout}>&1
{
  {
    local -Pi pipe
    local -P gid=$sysparams[pid]
    local -P sig=(ABRT EXIT HUP ILL INT PIPE QUIT TERM ZERR)
    local -P trap=(trap "trap - $sig; kill -- -$sysparams[pid]" $sig)

    exec {pipe}>&1 1>&$stdout
    $trap

    {
      $trap
      while sleep 1 && print -u $pipe .; do; done
    } 2>/dev/null &
    local -Pi watchdog=$!

    {
      trap - ZERR
      exec {pipe}>&-
      enable -p -- $pat
      disable -p -- $dis_pat
      options=($opt zle off monitor off)
      "$@"
    } &
    local -Pi ret
    wait $! || ret=$?

    trap "exit $ret" TERM
    kill $watchdog
    wait $watchdog
    return ret
  } | while read; do; done || return
} always {
  exec {stdout}>&-
}
